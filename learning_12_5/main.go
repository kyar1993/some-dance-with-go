// 12.5 алгоритм сортировки вставками
//
// перебираем все элементы, начиная с первого
// проверяем, есть ли слева от него элементы большие, чем он сам.
// Если есть, то перемещаем элемент левее. И так до тех пор,
// пока он не встанет на нужное место.
package main

import (
	"fmt"
	"math/rand"
	"time"
)

func init() {
	// необходимо для того, чтобы рандом был похож на рандомный
	rand.Seed(time.Now().UnixNano())
}

func main() {
	numbersList := make([]int, 50)

	for i := range numbersList {
		numbersList[i] = rand.Intn(200) - 100 // ограничиваем случайно значение от [-100;100]
	}

	fmt.Println("UNSORTED LIST", numbersList)
	fmt.Println()

	// 12.5.1 сортировка вставками
	insertionSort(numbersList)

	// выводим отсортированный список
	fmt.Println("\nSORTED LIST:", numbersList)
}

// 12.5.1 сортировка вставками
// перебираем все элементы, начиная с первого
// проверяем, есть ли слева от него элементы большие, чем он сам.
// Если есть, то перемещаем элемент левее. И так до тех пор,
// пока он не встанет на нужное место.
func insertionSort(ar []int) {
	arrLength := len(ar)

	for i := 1; i < arrLength; i++ {
		// значение текущего элемента
		currentValue := ar[i]

		// получаем предыдущий элемент
		j := i - 1

		for {
			// двигаем предыдущие элементы вперёд, пока не найдём меньший/равный элемент
			// тогда делаем вставку
			if ar[j] < currentValue {
				// вставляем после найденного элемента, который меньше текущего
				ar[j+1] = currentValue
				break
			}

			ar[j+1] = ar[j]

			// предыдущие элементы закончились - найдено самое малое число
			// пишем в 0
			if j == 0 {
				ar[j] = currentValue
				break
			}

			// получаем следующий предыдущий элемент
			j--
		}
	}
}
